// Generated by CoffeeScript 1.9.3
var ProjectCreateComponent, React, div, form, i, img, input, ref, textarea;

React = require('react');

ref = React.DOM, div = ref.div, img = ref.img, form = ref.form, input = ref.input, textarea = ref.textarea, i = ref.i;

ProjectCreateComponent = React.createClass({
  getInitialState: function() {
    return {
      name: "",
      problem: "",
      solution: "",
      info: "",
      github: "",
      dropbox: "",
      link: "",
      inProgress: false
    };
  },
  handleChange: function(e) {
    switch (e.target.name) {
      case "name":
        return this.setState({
          name: e.target.value
        });
      case "problem":
        return this.setState({
          problem: e.target.value
        });
      case "solution":
        return this.setState({
          solution: e.target.value
        });
      case "info":
        return this.setState({
          info: e.target.value
        });
      case "github":
        return this.setState({
          github: e.target.value
        });
      case "dropbox":
        return this.setState({
          dropbox: e.target.value
        });
      case "link":
        return this.setState({
          link: e.target.value
        });
    }
  },
  publish: function(e) {
    e.preventDefault();
    if (!this.state.inProgress) {
      this.setState({
        inProgress: true
      });
      return $.ajax({
        url: "/projects",
        dataType: 'json',
        method: 'POST',
        cache: false,
        data: this.state,
        success: (function(_this) {
          return function(data) {
            return _this.props.onCreate(data.project.id);
          };
        })(this),
        error: function(jqXHR, textStatus, errorThrown) {
          this.setState({
            inProgress: false
          });
          return console.log("Error updating posts: " + errorThrown);
        }
      });
    }
  },
  render: function() {
    var mainInputs, publishDisplay, sidebarInputs;
    sidebarInputs = [
      {
        name: "github",
        stateValue: this.state.github
      }, {
        name: "dropbox",
        stateValue: this.state.dropbox
      }, {
        name: "link",
        stateValue: this.state.link
      }
    ];
    mainInputs = [
      {
        name: "problem",
        title: "Problem",
        placeholder: "Tell us what problem you are solving",
        stateValue: this.state.problem
      }, {
        name: "solution",
        title: "Solution",
        placeholder: "How are you going to solve the problem?",
        stateValue: this.state.solution
      }, {
        name: "info",
        title: "More Info",
        placeholder: "More information...",
        stateValue: this.state.info
      }
    ];
    publishDisplay = this.state.inProgress ? img({
      className: "loading"
    }) : "Publish";
    return div({
      className: "body_area"
    }, div({
      className: "main-panel main-panel-create"
    }, form({}, input({
      name: "name",
      type: "text",
      value: this.state.name,
      onChange: this.handleChange,
      placeholder: "Name your project or idea"
    }, mainInputs.map((function(_this) {
      return function(arg) {
        var handleChange, name, placeholder, stateValue, title;
        name = arg.name, title = arg.title, placeholder = arg.placeholder, stateValue = arg.stateValue, handleChange = arg.handleChange;
        return div({}, div({
          className: "create-header"
        }, title, textarea({
          name: name,
          value: stateValue,
          onChange: _this.handleChange,
          placeholder: placeholder
        })));
      };
    })(this))), div({
      className: "submit-holder",
      onClick: this.publish,
      publishDisplay: publishDisplay
    }, publishDisplay))), div({
      className: "sidebar"
    }, div({
      className: "sidebar-header"
    }, "Attachments and Links"), sidebarInputs.map((function(_this) {
      return function(arg) {
        var name, stateValue;
        name = arg.name, stateValue = arg.stateValue;
        return div({
          className: "sidebar-link-wrapper"
        }, div({
          className: "icon-wrapper"
        }, i({
          className: "fa fa-" + name
        }, input({
          name: name,
          type: "text",
          onChange: _this.handleChange,
          value: stateValue,
          placeholder: name,
          key: name
        }))));
      };
    })(this))));
  }
});

module.exports = ProjectCreateComponent;
